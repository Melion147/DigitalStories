{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { STORY_INCREMENT, MAX_STORIES } from '../constants/index';\nexport const useInfiniteScroll = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [count, setCount] = useState(STORY_INCREMENT);\n\n  const handleScroll = () => {\n    if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight || loading) {\n      return false;\n    } else setLoading(true);\n  };\n\n  useEffect(() => {\n    if (!loading) return;\n\n    if (count + STORY_INCREMENT >= MAX_STORIES) {\n      setCount(MAX_STORIES);\n    } else setCount(count + STORY_INCREMENT);\n\n    setLoading(false);\n  }, [count, loading]);\n};\n\n_s(useInfiniteScroll, \"GLd6GTwTEZS5EtINK/2vsVqP+mQ=\");","map":{"version":3,"sources":["/home/mb/Desktop/Coding/webdev/React2/hackernews-tut/src/hooks/useInfiniteScroll.js"],"names":["useState","useEffect","STORY_INCREMENT","MAX_STORIES","useInfiniteScroll","loading","setLoading","count","setCount","handleScroll","window","innerHeight","document","documentElement","scrollTop","offsetHeight"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AAEA,SAASC,eAAT,EAA0BC,WAA1B,QAA4C,oBAA5C;AAEA,OAAO,MAAMC,iBAAiB,GAAG,MAAM;AAAA;;AACnC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAACE,eAAD,CAAlC;;AAEA,QAAMO,YAAY,GAAG,MAAM;AACvB,QAAGC,MAAM,CAACC,WAAP,GAAqBC,QAAQ,CAACC,eAAT,CAAyBC,SAA9C,KAA4DF,QAAQ,CAACC,eAAT,CAAyBE,YAArF,IAAsGV,OAAzG,EAAiH;AAC7G,aAAO,KAAP;AACH,KAFD,MAEMC,UAAU,CAAC,IAAD,CAAV;AACT,GAJD;;AAKAL,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAG,CAACI,OAAJ,EAAa;;AACb,QAAGE,KAAK,GAAGL,eAAR,IAA2BC,WAA9B,EAA0C;AACtCK,MAAAA,QAAQ,CAACL,WAAD,CAAR;AACH,KAFD,MAEMK,QAAQ,CAACD,KAAK,GAAEL,eAAR,CAAR;;AACNI,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH,GANQ,EAMN,CAACC,KAAD,EAAQF,OAAR,CANM,CAAT;AAOH,CAhBM;;GAAMD,iB","sourcesContent":["import {useState, useEffect} from 'react'\n\nimport { STORY_INCREMENT, MAX_STORIES} from '../constants/index'\n\nexport const useInfiniteScroll = () => {\n    const [loading, setLoading] = useState(false)\n    const [count, setCount] = useState(STORY_INCREMENT)\n    \n    const handleScroll = () => {\n        if(window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight  || loading){\n            return false;\n        }else setLoading(true)\n    };\n    useEffect(() => {\n        if(!loading) return;\n        if(count + STORY_INCREMENT >= MAX_STORIES){\n            setCount(MAX_STORIES)\n        }else setCount(count+ STORY_INCREMENT);\n        setLoading(false);\n    }, [count, loading])\n}"]},"metadata":{},"sourceType":"module"}