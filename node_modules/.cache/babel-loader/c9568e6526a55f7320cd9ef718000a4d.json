{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { STORY_INCREMENT, MAX_STORIES } from \"../constants/index\";\nimport { debounce } from \"../utils/debounce\";\nexport const useInfiniteScroll = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [count, setCount] = useState(STORY_INCREMENT);\n  const handleScroll = debounce(() => {\n    if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight || loading) {\n      return false;\n    } else setLoading(true);\n  }, 500);\n  useEffect(() => {\n    if (!loading) return;\n\n    if (count + STORY_INCREMENT >= MAX_STORIES) {\n      setCount(MAX_STORIES);\n    } else setCount(count + STORY_INCREMENT);\n\n    setLoading(false);\n  }, [loading]);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n  return count;\n};\n\n_s(useInfiniteScroll, \"Ymt8nUZzgiVbBXKxAcyIxVGl/v8=\");","map":{"version":3,"sources":["/home/mb/Desktop/Coding/webdev/React2/hackernews-tut/src/hooks/useInfiniteScroll.js"],"names":["useState","useEffect","STORY_INCREMENT","MAX_STORIES","debounce","useInfiniteScroll","loading","setLoading","count","setCount","handleScroll","window","innerHeight","document","documentElement","scrollTop","offsetHeight","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,SAASC,eAAT,EAA0BC,WAA1B,QAA6C,oBAA7C;AAEA,SAASC,QAAT,QAAyB,mBAAzB;AAEA,OAAO,MAAMC,iBAAiB,GAAG,MAAM;AAAA;;AACrC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAACE,eAAD,CAAlC;AAEA,QAAMQ,YAAY,GAAGN,QAAQ,CAAC,MAAM;AAClC,QACEO,MAAM,CAACC,WAAP,GAAqBC,QAAQ,CAACC,eAAT,CAAyBC,SAA9C,KACEF,QAAQ,CAACC,eAAT,CAAyBE,YAD3B,IAEAV,OAHF,EAIE;AACA,aAAO,KAAP;AACD,KAND,MAMOC,UAAU,CAAC,IAAD,CAAV;AACR,GAR4B,EAQ1B,GAR0B,CAA7B;AASAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACK,OAAL,EAAc;;AACd,QAAIE,KAAK,GAAGN,eAAR,IAA2BC,WAA/B,EAA4C;AAC1CM,MAAAA,QAAQ,CAACN,WAAD,CAAR;AACD,KAFD,MAEOM,QAAQ,CAACD,KAAK,GAAGN,eAAT,CAAR;;AACPK,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GANQ,EAMN,CAACD,OAAD,CANM,CAAT;AAOAL,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,MAAM,CAACM,gBAAP,CAAwB,QAAxB,EAAkCP,YAAlC;AACA,WAAO,MAAMC,MAAM,CAACO,mBAAP,CAA2B,QAA3B,EAAqCR,YAArC,CAAb;AACD,GAHQ,EAGN,EAHM,CAAT;AAIA,SAAOF,KAAP;AACD,CAzBM;;GAAMH,iB","sourcesContent":["import { useState, useEffect } from \"react\";\n\nimport { STORY_INCREMENT, MAX_STORIES } from \"../constants/index\";\n\nimport { debounce } from \"../utils/debounce\";\n\nexport const useInfiniteScroll = () => {\n  const [loading, setLoading] = useState(false);\n  const [count, setCount] = useState(STORY_INCREMENT);\n\n  const handleScroll = debounce(() => {\n    if (\n      window.innerHeight + document.documentElement.scrollTop !==\n        document.documentElement.offsetHeight ||\n      loading\n    ) {\n      return false;\n    } else setLoading(true);\n  }, 500);\n  useEffect(() => {\n    if (!loading) return;\n    if (count + STORY_INCREMENT >= MAX_STORIES) {\n      setCount(MAX_STORIES);\n    } else setCount(count + STORY_INCREMENT);\n    setLoading(false);\n  }, [loading]);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n  return count;\n};\n"]},"metadata":{},"sourceType":"module"}